import{o as s,c as l,k as c,q as n,s as a,A as o,e as t}from"../modules/vue-DJcEiztt.js";import{I as r}from"./default-Cu-rJO8A.js";import{u as i,f as m}from"./context-DU5YJk2D.js";import"../index-0Gy_dhNt.js";import"../modules/shiki-B18_m8lD.js";const u=t("h2",null,"Clock",-1),_=t("p",null,"clock 可以认为是一个从零开始递增的计数器，他有两种更新方式",-1),p=t("ul",null,[t("li",null,"自更新: localClock += 1"),t("li",null,"当接收到远程事件时: localClock = max(localClock, remoteClock) + 1")],-1),d=t("p",null,"这种机制看似简单，但实际上使我们获得了数学上性质良好的全序结构。这意味着只要再配合比较 clientID 的大小，即可令任意两个 item 之间均可对比获得逻辑上的先后关系。",-1),h=t("img",{"w-xl":"",src:"https://raw.githubusercontent.com/Deuscx/pic/master/20230624173827.png"},null,-1),k=t("p",null,"当用户依次输入 ABC 时，会为此产生 3 个 Item，这对于大文件来说是非常吃内存的，但为了能解决并发冲突这里面的元数据信息又是需要保留的。但仔细观察可以发现这 3 个 Item 是连续的，Yjs 内部对其就做了一些优化。通过字符偏移重新优化成了一个 Item 对象",-1),q={__name:"23",setup(f){const{$slidev:C,$nav:x,$clicksContext:$,$clicks:I,$page:g,$renderContext:B,$frontmatter:e}=i();return(v,w)=>(s(),l(r,n(a(o(m)(o(e),22))),{default:c(()=>[u,_,p,d,h,k]),_:1},16))}};export{q as default};
